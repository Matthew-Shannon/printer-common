#https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html$0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MACROS MAIN
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[gcode_macro AUTO_HOME]
gcode:
    G28

[gcode_macro AUTO_SCREWS]
gcode:
    AUTO_HOME
    SCREWS_TILT_CALCULATE

[gcode_macro AUTO_Z_TRAM]
gcode:
	G28
	Z_TILT_ADJUST
	G28

[gcode_macro AUTO_CALIBRATE]
gcode:
	AUTO_Z_TRAM
	SCREWS_TILT_CALCULATE
    M84 ; disable motors

[gcode_macro AUTO_PURGE]
gcode:
    SAVE_GCODE_STATE NAME=Prepurge_State                                                # Create gcode state
    G92 E0                                                                              # Reset extruder
    G0 F1800                                                                            # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X5 Y-5                                                                           # Move to purge position
    G0 Z0.8                                                                             # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E5 F144                                                                          # Move filament tip
    G1 X25 E30 F144 #E30                                                                # Purge line
    G1 E-.55 F2100                                                                      # Retract
    G0 X30 F1800                                                                        # Rapid move to break string
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z1.6 F1800                                                                       # Z hop
    RESTORE_GCODE_STATE NAME=Prepurge_State                                             # Restore gcode state


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}

    # start up; home and tram
    M117
    EXCLUDE_OBJECT_DEFINE
    AUTO_Z_TRAM

    # warm up and bed mesh
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP-60}
    BED_MESH_CALIBRATE ADAPTIVE=1

    # position nozzle near print and set accesories
    SET_LED_ON
    SET_FILAMENT_SENSOR_ON

    # finish heatup and purge
    M109 S{EXTRUDER_TEMP}
    AUTO_PURGE
    M83 # do we need?

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_LED_ON
        SET_FILAMENT_SENSOR_ON                                                       ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        G1 Z{zhop * -1} F900                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro                           
        SET_LED_OFF
        SET_FILAMENT_SENSOR_OFF	
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} E-5 F900                                                                 ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=86400 #43200                                                ; set timeout to 12 hours
    {% endif %}

[gcode_macro END_PRINT]
gcode:
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}                                                           # Set travel speed from config

    G91 
    G1 Z1 E-5 F900

    {% if (printer.gcode_move.position.z + 10) < printer.toolhead.axis_maximum.z %}
        G1 Z10
    {% endif %}

    G90
    G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y} F{travel_speed}
    SET_LED_OFF
    TURN_OFF_HEATERS
    M107 ; turn off fan
    M84 ; disable motors
    
    SET_LED_OFF
    SET_FILAMENT_SENSOR_OFF
    UPDATE_DELAYED_GCODE ID=CLEAR_FILE DURATION=1

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    END_PRINT
    BASE_CANCEL_PRINT


[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+2}   ; Wait for hotend temp (within 2 degree)
    {% endif %}
    
[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+2}  ; Wait for bed temp (within 2 degree)
    {% endif %}

[delayed_gcode CLEAR_FILE]
gcode: 
    SDCARD_RESET_FILE

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Utils
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[gcode_macro BLTOUCH_PIN_DOWN]
gcode: BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro BLTOUCH_PIN_UP]
gcode: BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro BLTOUCH_RESET]
gcode: BLTOUCH_DEBUG COMMAND=reset

[gcode_macro AUTO_RESONANCE_X]
gcode: SHAPER_CALIBRATE AXIS=X

[gcode_macro AUTO_RESONANCE_Y]
gcode: SHAPER_CALIBRATE AXIS=Y

[gcode_macro AUTO_AXIS_TWIST_X]
gcode: AXIS_TWIST_COMPENSATION_CALIBRATE AXIS=X

[gcode_macro AUTO_AXIS_TWIST_Y]
gcode: AXIS_TWIST_COMPENSATION_CALIBRATE AXIS=Y

[gcode_macro AUTO_PID_EXTRUDER]
gcode: PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|float}

[gcode_macro AUTO_PID_BED]
gcode: PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|float}

[gcode_macro QUERY_CHAMBER]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%\n" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}